package hashTable

// hashtable 是数据的一种泛化

// 11.2-2
// 每个key所占的索引 5, 1,1,6,2,5,8,1

// 11.2-3
// 使用有序链表解决冲突，对于查找方便，从O(n)变成O(log(n)), 但是对于插入从O(1)变成
// 了O(log(n)), 在loadfactor的影响下，冲突数据应该比较少，所以使用有序list不是太好

// 11.2-4
// 

//11.2-5
// 如果刚好n个可以都hash到相同的slot里面，这时候变成n长度的list,
// 对于n长度的list,搜索的复杂度是Θ(n)

//11.2-6
// key位于长度为l的链表末端


// Hash function
// 余数法
// 

// 11.3-1
// 首先比较hash值，在hash值相同的情况下再比较string的值
// 貌似加速的方法都是转化到一个相对窄而比较容易的操作做先锋比较，
// 只有通过这个条件后才进行真正的比较，尽早过滤不满足的条件

// 11.3-2
// 都转化成二进制进行位与操作

